apply plugin: "java"
apply plugin: "maven"
apply plugin: "application"
apply plugin: "idea"
apply plugin: "cpp"
apply plugin: "signing"

ext {
    release = project.hasProperty("release") ? Boolean.valueOf(project.release) : false
    signEnabled = project.hasProperty("signEnabled") ? Boolean.valueOf(project.signEnabled) : false
    sonatypeUsername = project.hasProperty("sonatypeUsername") ? project.sonatypeUsername : ""
    sonatypePassword = project.hasProperty("sonatypePassword") ? project.sonatypePassword : ""

    openZWaveDir = project.openZWaveDir
    openZWaveConfigDir = project.openZWaveConfigDir
    zWaveControllerPort = project.zWaveControllerPort

    nativeClasses = ["org.zwave4j.Manager", "org.zwave4j.Options"]

    additionalNativeLibsDir = "native_libs"

    classesNativeLibsDir = "native_libs"
}

group = "com.github.zgmnkv"
version = "0.2" + (release ? "" : "-SNAPSHOT")
mainClassName = "org.zwave4j.Main"

repositories {
    mavenLocal()
    mavenCentral()
}

model {
    platforms {
        osx_x86 {
            architecture "x86"
            operatingSystem "osx"
        }
        osx_amd64 {
            architecture "amd64"
            operatingSystem "osx"
        }
        linux_x86 {
            architecture "x86"
            operatingSystem "linux"
        }
        linux_amd64 {
            architecture "amd64"
            operatingSystem "linux"
        }
        linux_arm {
            architecture "arm"
            operatingSystem "linux"
        }
        windows_x86 {
            architecture "x86"
            operatingSystem "windows"
        }
        windows_amd64 {
            architecture "amd64"
            operatingSystem "windows"
        }
    }
    toolChains {
        gcc(Gcc) {
            //gradle 1.12 for some reason does not support windows amd64 cross compile
            addPlatformConfiguration(new TargetPlatformConfiguration() {
                boolean supportsPlatform(Platform platform) {
                    platform.operatingSystem.current && platform.operatingSystem.name == "windows" && platform.architecture.name == "amd64"
                }
                List<String> getCppCompilerArgs() { ["-m64"] }
                List<String> getCCompilerArgs() { ["-m64"] }
                List<String> getObjectiveCCompilerArgs() { ["-m64"] }
                List<String> getObjectiveCppCompilerArgs() { ["-m64"] }
                List<String> getAssemblerArgs() { ["--64"] }
                List<String> getLinkerArgs() { ["-m64"] }
                List<String> getStaticLibraryArchiverArgs() { [] }
            })
        }
    }
}

sources {
    main {
        cpp {
            source {
                srcDir "src/main/cpp"
                srcDir "$openZWaveDir/cpp/tinyxml"

                if (org.gradle.internal.os.OperatingSystem.current().windows) {
                    srcDir "$openZWaveDir/cpp/hidapi/windows"
                }

                srcDir "$openZWaveDir/cpp/src"
                srcDir "$openZWaveDir/cpp/src/command_classes"
                srcDir "$openZWaveDir/cpp/src/value_classes"
                srcDir "$openZWaveDir/cpp/src/platform"

                if (org.gradle.internal.os.OperatingSystem.current().windows) {
                    srcDir "$openZWaveDir/cpp/src/platform/windows"
                } else {
                    srcDir "$openZWaveDir/cpp/src/platform/unix"
                }

                srcDir "$project.buildDir/ozw-version"

                include "*.cpp"
            }
        }
    }
}

libraries {
    main {
        baseName = "zwave4j"
        binaries.all {
            if (toolChain in Gcc) {
                if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-DMINGW"
                }

                cppCompiler.args "-I", "$project.buildDir/native-headers"

                cppCompiler.args "-I", "$openZWaveDir/cpp/tinyxml"
                cppCompiler.args "-I", "$openZWaveDir/cpp/hidapi/hidapi"
                cppCompiler.args "-I", "$openZWaveDir/cpp/src"
                cppCompiler.args "-I", "$openZWaveDir/cpp/src/command_classes"
                cppCompiler.args "-I", "$openZWaveDir/cpp/src/value_classes"
                cppCompiler.args "-I", "$openZWaveDir/cpp/src/platform"

                if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I", "$openZWaveDir/cpp/src/platform/windows"
                } else {
                    cppCompiler.args "-I", "$openZWaveDir/cpp/src/platform/unix"
                }

                cppCompiler.args "-I", "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"

                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args "-I", "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                } else if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args "-I", "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I", "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                }

                if (targetPlatform.operatingSystem.macOsX) {
                    linker.args "-mmacosx-version-min=10.4"
                } else if (targetPlatform.operatingSystem.windows) {
                    linker.args "-lsetupapi"
                    linker.args "-static"
                    if (targetPlatform.architecture.name == "x86") {
                        linker.args "-Wl,--kill-at"
                    }
                }

                tasks.withType(CppCompile) {
                    dependsOn generateNativeHeaders, generateOzwVersionCpp
                }
            }
        }
    }
}

task generateOzwVersionCpp() {
    outputs.file("$project.buildDir/ozw-version/version.cpp")
    doLast {
        def f = file("$project.buildDir/ozw-version/version.cpp")
        f.parentFile.mkdirs()
        f.text = "" +
                "unsigned short ozw_vers_minor = 1;\n" +
                "unsigned short ozw_vers_major = 0;\n" +
                "unsigned short ozw_vers_revision = 0;\n" +
                "char ozw_vers[] = \"OpenZWave version 1.0.0\";\n"
    }
}

task generateNativeHeaders(type: Exec, dependsOn: classes) {
    inputs.dir(sourceSets.main.output.classesDir)
    outputs.dir("$project.buildDir/native-headers")

    commandLine "javah"
    args "-d", "$project.buildDir/native-headers"
    args "-classpath", sourceSets.main.runtimeClasspath.asPath
    args nativeClasses
}

task copyNativeLibs(type: Copy) {
    into "$sourceSets.main.output.classesDir/$classesNativeLibsDir"
    from additionalNativeLibsDir
}

libraries.main.binaries.withType(SharedLibraryBinary) {
    afterEvaluate {
        if (buildable) {
            copyNativeLibs.dependsOn tasks.builder
            copyNativeLibs.from tasks.builder.outputFile, {
                into "$targetPlatform.operatingSystem.name/$targetPlatform.architecture.name"
            }
        }
    }
}

jar.dependsOn copyNativeLibs

run {
    dependsOn copyNativeLibs
    standardInput = System.in
    jvmArgs([
            "-Xdebug",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"
    ])
    args([
            openZWaveConfigDir,
            zWaveControllerPort
    ])
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
}

task configZip(type: Zip) {
    from openZWaveConfigDir
    classifier "ozw_config"
}

task wrapper(type: Wrapper) {
    gradleVersion = "1.12"
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives configZip
}

signing {
    required { signEnabled }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { signing.signPom(it) }

            repository(url: "https://oss.sonatype.org/" + (release ? "service/local/staging/deploy/maven2" : "content/repositories/snapshots")) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                packaging "jar"
                name "ZWave4J"
                description "ZWave4J is a Java wrapper for Open-ZWave library"
                url "https://github.com/zgmnkv/zwave4j"

                scm {
                    url "https://github.com/zgmnkv/zwave4j"
                    connection "scm:git:https://github.com/zgmnkv/zwave4j"
                    developerConnection "scm:git:https://github.com/zgmnkv/zwave4j"
                }

                licenses {
                    license {
                        name "GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007"
                        url "http://www.gnu.org/licenses/gpl-3.0.txt"
                        distribution "repo"
                    }
                }

                developers {
                    developer {
                        id "zgmnkv"
                        name "Alexander Zagumennikov"
                    }
                }
            }
        }
    }
}
