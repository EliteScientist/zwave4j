apply plugin: "maven"
apply plugin: "java"
apply plugin: "application"
apply plugin: "idea"
apply plugin: "cpp-lib"

group = "org.zwave4j"
version = "0.1"
mainClassName = "org.zwave4j.Main"

ext {
    openZWaveDir = project.openZWaveDir
    openZWaveLibFile = project.openZWaveLibFile
    openZWaveConfigDir = project.openZWaveConfigDir
    zWaveControllerPort = project.zWaveControllerPort

    javaHome = System.getenv("JAVA_HOME")
    nativeClasses = ["org.zwave4j.Manager", "org.zwave4j.Options"]
    nativeLibsDir = "native-libs"

    def osName = System.properties["os.name"]
    if (osName == "Linux") {
        os = "linux"
    } else if (osName.startsWith("Windows")) {
        os = "windows"
    } else if (osName == "SunOS") {
        os = "solaris"
    } else if (osName.endsWith("OS X")) {
        os = "os_x"
    }

    def architectureName = System.properties["os.arch"]
    if (architectureName.endsWith("86")) {
        architecture = "x86"
    } else if (architectureName == "amd64") {
        architecture = "amd64"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

libraries {
    main {
        spec {
            includes(files("${javaHome}/include"))
            includes(files("${javaHome}/include/win32"))
            includes(files("${javaHome}/include/linux"))
            includes(files("${openZWaveDir}/cpp/src"))
            includes(files("${openZWaveDir}/cpp/src/value_classes"))
            includes(files("${openZWaveDir}/cpp/src/command_classes"))
            includes(files("${openZWaveDir}/cpp/src/platform"))
            includes(files("${openZWaveDir}/cpp/src/platform/unix"))
            includes(files("${openZWaveDir}/cpp/src/platform/windows"))
            args openZWaveLibFile
            args "-static"
            if (architecture == "amd64") {
                args "-m64"
            }
            if (architecture == "x86") {
                args "-m32"
            }
            if (os == "windows") {
                args "-lsetupapi"
                if (architecture == "x86") {
                    args "-Wl,--kill-at"
                }
            }
        }
    }
}

task generateNativeHeaders(type: Exec, dependsOn: classes) {
    commandLine "javah"
    args "-d", "src/main/headers"
    args "-classpath", sourceSets.main.runtimeClasspath.asPath
    args nativeClasses
}

compileMain.dependsOn generateNativeHeaders

jar {
    dependsOn compileMain
    from "${buildDir}/binaries", {
        into "${nativeLibsDir}/${os}/${architecture}"
    }
}

run {
    dependsOn compileMain
    standardInput = System.in
    doFirst {
        copy {
            from "${buildDir}/binaries"
            into "${buildDir}/classes/main/${nativeLibsDir}/${os}/${architecture}"
        }
    }
    jvmArgs([
            "-Xdebug",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"
    ])
    args([
            openZWaveConfigDir,
            zWaveControllerPort
    ])
}

task srcJar(type: Jar) {
    from "src/main/java"
    classifier = "sources"
}

artifacts {
    archives srcJar
}
